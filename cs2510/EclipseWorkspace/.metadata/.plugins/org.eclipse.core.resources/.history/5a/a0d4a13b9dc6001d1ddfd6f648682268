import tester.*;

abstract class ANode<T> {
  ANode<T> next;
  ANode<T> prev;

  void updatePrevious(ANode<T> prev) {
    this.prev = prev;
  }
  
  void updateNext(ANode<T> next) {
    this.next = next;
  }

  int size() {
    return 0;
  }

  int sizeStarter() {
    return this.next.size();
  }
}

class Node<T> extends ANode<T> {
  T data;
  
  Node(T data) {
    this.data = data;
    this.next = null;
    this.prev = null;
  }
  
  Node(T data, ANode<T> next, ANode<T> prev) {
    if (prev == null || next == null) {
      throw new IllegalArgumentException("Cannot assign null valuesto previous or next nodes");
    }
    this.data = data;
    this.next = next;
    this.next.updatePrevious(this);
    this.prev = prev;
    this.prev.updateNext(this);
  }
  
  int size() {
    return 1 + this.next.size();
  }
}

class Sentinel<T> extends ANode<T> {
  
  Sentinel() {
    this.next = this;
    this.prev = this;
  }
  
}

class Deque<T> {
  Sentinel<T> header;
  Deque() {
    this.header = new Sentinel<T>();
  }
  
  Deque(Sentinel<T> header) {
    this.header = header;
  }
  
  int size() {
    return header.sizeStarter();
  }
}

class ExamplesDeque {
  Deque<String> deque1 = new Deque<String>();
  Deque<String> deque2 = new Deque<String>();
  Deque<Integer> deque3 = new Deque<Integer>();
  
  ExamplesDeque() {
    this.reset();
  }
  
  void reset() {
    this.deque1 = new Deque<String>();
    this.deque2 = new Deque<String>();
    this.deque3 = new Deque<Integer>();
    new Node<String>("abc", new Node<String>("bcd", new Node<String>("cde", new Node<String>("def", this.deque2.header, this.deque2.header), this.deque2.header), this.deque2.header), this.deque2.header);
    new Node<Integer>(420, new Node<Integer>(69, new Node<Integer>(7, new Node<Integer>(560, this.deque3.header, this.deque3.header), this.deque3.header), this.deque3.header), this.deque3.header);
  }
  
  void testInitialization(Tester t) {
    this.reset();
    t.checkExpect(deque2, new Deque<String>());
  }

}